{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialCounterState,\n  reducers: {\n    increment(state) {\n      state.counter++; //we can write like this here, but we still cant manipulate\n      //it clones this code, and overwrites state-translated into imutable code\n    },\n\n    decrement(state) {\n      state.counter--;\n    },\n\n    increace(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n\n    toggle(state) {\n      state.showCounter = !state.showCounter;\n    }\n\n  }\n});\nexport default counterSlice.reducer;\nexport const counterActions = counterSlice.actions;","map":{"version":3,"sources":["D:/React/18 - Redux/01-starting-project/src/store/counter.js"],"names":["createSlice","initialCounterState","counter","showCounter","counterSlice","name","reducers","increment","state","decrement","increace","action","payload","toggle","reducer","counterActions","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,mBAAmB,GAAG;AAAEC,EAAAA,OAAO,EAAE,CAAX;AAAcC,EAAAA,WAAW,EAAE;AAA3B,CAA5B;AACA,MAAMC,YAAY,GAAGJ,WAAW,CAAC;AAC/BK,EAAAA,IAAI,EAAE,SADyB;AAE/BJ,EAAAA,mBAF+B;AAG/BK,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,CAACC,KAAD,EAAQ;AACfA,MAAAA,KAAK,CAACN,OAAN,GADe,CACE;AACjB;AACD,KAJO;;AAKRO,IAAAA,SAAS,CAACD,KAAD,EAAQ;AACfA,MAAAA,KAAK,CAACN,OAAN;AACD,KAPO;;AAQRQ,IAAAA,QAAQ,CAACF,KAAD,EAAQG,MAAR,EAAgB;AACtBH,MAAAA,KAAK,CAACN,OAAN,GAAgBM,KAAK,CAACN,OAAN,GAAgBS,MAAM,CAACC,OAAvC;AACD,KAVO;;AAWRC,IAAAA,MAAM,CAACL,KAAD,EAAQ;AACZA,MAAAA,KAAK,CAACL,WAAN,GAAoB,CAACK,KAAK,CAACL,WAA3B;AACD;;AAbO;AAHqB,CAAD,CAAhC;AAoBA,eAAeC,YAAY,CAACU,OAA5B;AACA,OAAO,MAAMC,cAAc,GAAGX,YAAY,CAACY,OAApC","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialCounterState = { counter: 0, showCounter: true };\r\nconst counterSlice = createSlice({\r\n  name: \"counter\",\r\n  initialCounterState,\r\n  reducers: {\r\n    increment(state) {\r\n      state.counter++; //we can write like this here, but we still cant manipulate\r\n      //it clones this code, and overwrites state-translated into imutable code\r\n    },\r\n    decrement(state) {\r\n      state.counter--;\r\n    },\r\n    increace(state, action) {\r\n      state.counter = state.counter + action.payload;\r\n    },\r\n    toggle(state) {\r\n      state.showCounter = !state.showCounter;\r\n    },\r\n  },\r\n});\r\n\r\nexport default counterSlice.reducer;\r\nexport const counterActions = counterSlice.actions;"]},"metadata":{},"sourceType":"module"}